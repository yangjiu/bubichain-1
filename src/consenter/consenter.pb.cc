// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consenter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "consenter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TransactionLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionLite_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionLiteSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionLiteSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedgerHeaderLite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedgerHeaderLite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_consenter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_consenter_2eproto() {
  protobuf_AddDesc_consenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "consenter.proto");
  GOOGLE_CHECK(file != NULL);
  TransactionLite_descriptor_ = file->message_type(0);
  static const int TransactionLite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLite, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLite, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLite, operation_),
  };
  TransactionLite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionLite_descriptor_,
      TransactionLite::default_instance_,
      TransactionLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLite, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionLite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLite, _internal_metadata_),
      -1);
  TransactionLiteSet_descriptor_ = file->message_type(1);
  static const int TransactionLiteSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLiteSet, preledger_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLiteSet, txs_),
  };
  TransactionLiteSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionLiteSet_descriptor_,
      TransactionLiteSet::default_instance_,
      TransactionLiteSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLiteSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionLiteSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLiteSet, _internal_metadata_),
      -1);
  LedgerHeaderLite_descriptor_ = file->message_type(2);
  static const int LedgerHeaderLite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, phash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, txs_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, tx_count_),
  };
  LedgerHeaderLite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LedgerHeaderLite_descriptor_,
      LedgerHeaderLite::default_instance_,
      LedgerHeaderLite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, _has_bits_[0]),
      -1,
      -1,
      sizeof(LedgerHeaderLite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerHeaderLite, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_consenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionLite_descriptor_, &TransactionLite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionLiteSet_descriptor_, &TransactionLiteSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LedgerHeaderLite_descriptor_, &LedgerHeaderLite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_consenter_2eproto() {
  delete TransactionLite::default_instance_;
  delete TransactionLite_reflection_;
  delete TransactionLiteSet::default_instance_;
  delete TransactionLiteSet_reflection_;
  delete LedgerHeaderLite::default_instance_;
  delete LedgerHeaderLite_reflection_;
}

void protobuf_AddDesc_consenter_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_consenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017consenter.proto\022\010protocol\"E\n\017Transacti"
    "onLite\022\r\n\005topic\030\001 \002(\t\022\020\n\010sequence\030\002 \002(\003\022"
    "\021\n\toperation\030\003 \002(\t\"T\n\022TransactionLiteSet"
    "\022\026\n\016preledger_hash\030\001 \002(\014\022&\n\003txs\030\002 \003(\0132\031."
    "protocol.TransactionLite\"y\n\020LedgerHeader"
    "Lite\022\020\n\010sequence\030\001 \002(\003\022\014\n\004hash\030\002 \002(\014\022\r\n\005"
    "phash\030\003 \002(\014\022\020\n\010txs_hash\030\004 \002(\014\022\022\n\napply_t"
    "ime\030\005 \002(\003\022\020\n\010tx_count\030\006 \002(\003", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "consenter.proto", &protobuf_RegisterTypes);
  TransactionLite::default_instance_ = new TransactionLite();
  TransactionLiteSet::default_instance_ = new TransactionLiteSet();
  LedgerHeaderLite::default_instance_ = new LedgerHeaderLite();
  TransactionLite::default_instance_->InitAsDefaultInstance();
  TransactionLiteSet::default_instance_->InitAsDefaultInstance();
  LedgerHeaderLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_consenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_consenter_2eproto {
  StaticDescriptorInitializer_consenter_2eproto() {
    protobuf_AddDesc_consenter_2eproto();
  }
} static_descriptor_initializer_consenter_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionLite::kTopicFieldNumber;
const int TransactionLite::kSequenceFieldNumber;
const int TransactionLite::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionLite::TransactionLite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionLite)
}

void TransactionLite::InitAsDefaultInstance() {
}

TransactionLite::TransactionLite(const TransactionLite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionLite)
}

void TransactionLite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = GOOGLE_LONGLONG(0);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionLite::~TransactionLite() {
  // @@protoc_insertion_point(destructor:protocol.TransactionLite)
  SharedDtor();
}

void TransactionLite::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionLite_descriptor_;
}

const TransactionLite& TransactionLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consenter_2eproto();
  return *default_instance_;
}

TransactionLite* TransactionLite::default_instance_ = NULL;

TransactionLite* TransactionLite::New(::google::protobuf::Arena* arena) const {
  TransactionLite* n = new TransactionLite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionLite)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sequence_ = GOOGLE_LONGLONG(0);
    if (has_operation()) {
      operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionLite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.TransactionLite.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operation;
        break;
      }

      // required string operation = 3;
      case 3: {
        if (tag == 26) {
         parse_operation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operation().data(), this->operation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.TransactionLite.operation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionLite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionLite)
  return false;
#undef DO_
}

void TransactionLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionLite)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.TransactionLite.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // required string operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.TransactionLite.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionLite)
}

::google::protobuf::uint8* TransactionLite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionLite)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.TransactionLite.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // required string operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operation().data(), this->operation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.TransactionLite.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionLite)
  return target;
}

int TransactionLite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.TransactionLite)
  int total_size = 0;

  if (has_topic()) {
    // required string topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_sequence()) {
    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_operation()) {
    // required string operation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  return total_size;
}
int TransactionLite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionLite)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required int64 sequence = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required string operation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionLite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionLite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransactionLite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionLite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionLite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionLite)
    MergeFrom(*source);
  }
}

void TransactionLite::MergeFrom(const TransactionLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionLite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_operation()) {
      set_has_operation();
      operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionLite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionLite::CopyFrom(const TransactionLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionLite::Swap(TransactionLite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionLite::InternalSwap(TransactionLite* other) {
  topic_.Swap(&other->topic_);
  std::swap(sequence_, other->sequence_);
  operation_.Swap(&other->operation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionLite_descriptor_;
  metadata.reflection = TransactionLite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionLite

// required string topic = 1;
bool TransactionLite::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionLite::set_has_topic() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionLite::clear_has_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionLite::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& TransactionLite::topic() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionLite.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLite::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionLite.topic)
}
 void TransactionLite::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionLite.topic)
}
 void TransactionLite::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionLite.topic)
}
 ::std::string* TransactionLite::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionLite.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionLite::release_topic() {
  // @@protoc_insertion_point(field_release:protocol.TransactionLite.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLite::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionLite.topic)
}

// required int64 sequence = 2;
bool TransactionLite::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionLite::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionLite::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionLite::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
 ::google::protobuf::int64 TransactionLite::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionLite.sequence)
  return sequence_;
}
 void TransactionLite::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionLite.sequence)
}

// required string operation = 3;
bool TransactionLite::has_operation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionLite::set_has_operation() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionLite::clear_has_operation() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionLite::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operation();
}
 const ::std::string& TransactionLite::operation() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionLite.operation)
  return operation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLite::set_operation(const ::std::string& value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionLite.operation)
}
 void TransactionLite::set_operation(const char* value) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionLite.operation)
}
 void TransactionLite::set_operation(const char* value, size_t size) {
  set_has_operation();
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionLite.operation)
}
 ::std::string* TransactionLite::mutable_operation() {
  set_has_operation();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionLite.operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionLite::release_operation() {
  // @@protoc_insertion_point(field_release:protocol.TransactionLite.operation)
  clear_has_operation();
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLite::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    set_has_operation();
  } else {
    clear_has_operation();
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionLite.operation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionLiteSet::kPreledgerHashFieldNumber;
const int TransactionLiteSet::kTxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionLiteSet::TransactionLiteSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionLiteSet)
}

void TransactionLiteSet::InitAsDefaultInstance() {
}

TransactionLiteSet::TransactionLiteSet(const TransactionLiteSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionLiteSet)
}

void TransactionLiteSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  preledger_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionLiteSet::~TransactionLiteSet() {
  // @@protoc_insertion_point(destructor:protocol.TransactionLiteSet)
  SharedDtor();
}

void TransactionLiteSet::SharedDtor() {
  preledger_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionLiteSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionLiteSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionLiteSet_descriptor_;
}

const TransactionLiteSet& TransactionLiteSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consenter_2eproto();
  return *default_instance_;
}

TransactionLiteSet* TransactionLiteSet::default_instance_ = NULL;

TransactionLiteSet* TransactionLiteSet::New(::google::protobuf::Arena* arena) const {
  TransactionLiteSet* n = new TransactionLiteSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionLiteSet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionLiteSet)
  if (has_preledger_hash()) {
    preledger_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  txs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionLiteSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionLiteSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes preledger_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preledger_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txs;
        break;
      }

      // repeated .protocol.TransactionLite txs = 2;
      case 2: {
        if (tag == 18) {
         parse_txs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_txs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_txs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_txs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionLiteSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionLiteSet)
  return false;
#undef DO_
}

void TransactionLiteSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionLiteSet)
  // required bytes preledger_hash = 1;
  if (has_preledger_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->preledger_hash(), output);
  }

  // repeated .protocol.TransactionLite txs = 2;
  for (unsigned int i = 0, n = this->txs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->txs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionLiteSet)
}

::google::protobuf::uint8* TransactionLiteSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionLiteSet)
  // required bytes preledger_hash = 1;
  if (has_preledger_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->preledger_hash(), target);
  }

  // repeated .protocol.TransactionLite txs = 2;
  for (unsigned int i = 0, n = this->txs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->txs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionLiteSet)
  return target;
}

int TransactionLiteSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionLiteSet)
  int total_size = 0;

  // required bytes preledger_hash = 1;
  if (has_preledger_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->preledger_hash());
  }
  // repeated .protocol.TransactionLite txs = 2;
  total_size += 1 * this->txs_size();
  for (int i = 0; i < this->txs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionLiteSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionLiteSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransactionLiteSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionLiteSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionLiteSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionLiteSet)
    MergeFrom(*source);
  }
}

void TransactionLiteSet::MergeFrom(const TransactionLiteSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionLiteSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  txs_.MergeFrom(from.txs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preledger_hash()) {
      set_has_preledger_hash();
      preledger_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preledger_hash_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionLiteSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionLiteSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionLiteSet::CopyFrom(const TransactionLiteSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionLiteSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionLiteSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->txs())) return false;
  return true;
}

void TransactionLiteSet::Swap(TransactionLiteSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionLiteSet::InternalSwap(TransactionLiteSet* other) {
  preledger_hash_.Swap(&other->preledger_hash_);
  txs_.UnsafeArenaSwap(&other->txs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionLiteSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionLiteSet_descriptor_;
  metadata.reflection = TransactionLiteSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionLiteSet

// required bytes preledger_hash = 1;
bool TransactionLiteSet::has_preledger_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionLiteSet::set_has_preledger_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionLiteSet::clear_has_preledger_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionLiteSet::clear_preledger_hash() {
  preledger_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preledger_hash();
}
 const ::std::string& TransactionLiteSet::preledger_hash() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionLiteSet.preledger_hash)
  return preledger_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLiteSet::set_preledger_hash(const ::std::string& value) {
  set_has_preledger_hash();
  preledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionLiteSet.preledger_hash)
}
 void TransactionLiteSet::set_preledger_hash(const char* value) {
  set_has_preledger_hash();
  preledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionLiteSet.preledger_hash)
}
 void TransactionLiteSet::set_preledger_hash(const void* value, size_t size) {
  set_has_preledger_hash();
  preledger_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionLiteSet.preledger_hash)
}
 ::std::string* TransactionLiteSet::mutable_preledger_hash() {
  set_has_preledger_hash();
  // @@protoc_insertion_point(field_mutable:protocol.TransactionLiteSet.preledger_hash)
  return preledger_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionLiteSet::release_preledger_hash() {
  // @@protoc_insertion_point(field_release:protocol.TransactionLiteSet.preledger_hash)
  clear_has_preledger_hash();
  return preledger_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionLiteSet::set_allocated_preledger_hash(::std::string* preledger_hash) {
  if (preledger_hash != NULL) {
    set_has_preledger_hash();
  } else {
    clear_has_preledger_hash();
  }
  preledger_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preledger_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionLiteSet.preledger_hash)
}

// repeated .protocol.TransactionLite txs = 2;
int TransactionLiteSet::txs_size() const {
  return txs_.size();
}
void TransactionLiteSet::clear_txs() {
  txs_.Clear();
}
const ::protocol::TransactionLite& TransactionLiteSet::txs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionLiteSet.txs)
  return txs_.Get(index);
}
::protocol::TransactionLite* TransactionLiteSet::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionLiteSet.txs)
  return txs_.Mutable(index);
}
::protocol::TransactionLite* TransactionLiteSet::add_txs() {
  // @@protoc_insertion_point(field_add:protocol.TransactionLiteSet.txs)
  return txs_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::TransactionLite >*
TransactionLiteSet::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionLiteSet.txs)
  return &txs_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::TransactionLite >&
TransactionLiteSet::txs() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionLiteSet.txs)
  return txs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerHeaderLite::kSequenceFieldNumber;
const int LedgerHeaderLite::kHashFieldNumber;
const int LedgerHeaderLite::kPhashFieldNumber;
const int LedgerHeaderLite::kTxsHashFieldNumber;
const int LedgerHeaderLite::kApplyTimeFieldNumber;
const int LedgerHeaderLite::kTxCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerHeaderLite::LedgerHeaderLite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LedgerHeaderLite)
}

void LedgerHeaderLite::InitAsDefaultInstance() {
}

LedgerHeaderLite::LedgerHeaderLite(const LedgerHeaderLite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.LedgerHeaderLite)
}

void LedgerHeaderLite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = GOOGLE_LONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apply_time_ = GOOGLE_LONGLONG(0);
  tx_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedgerHeaderLite::~LedgerHeaderLite() {
  // @@protoc_insertion_point(destructor:protocol.LedgerHeaderLite)
  SharedDtor();
}

void LedgerHeaderLite::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LedgerHeaderLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedgerHeaderLite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedgerHeaderLite_descriptor_;
}

const LedgerHeaderLite& LedgerHeaderLite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consenter_2eproto();
  return *default_instance_;
}

LedgerHeaderLite* LedgerHeaderLite::default_instance_ = NULL;

LedgerHeaderLite* LedgerHeaderLite::New(::google::protobuf::Arena* arena) const {
  LedgerHeaderLite* n = new LedgerHeaderLite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LedgerHeaderLite::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LedgerHeaderLite)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LedgerHeaderLite, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LedgerHeaderLite*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(apply_time_, tx_count_);
    sequence_ = GOOGLE_LONGLONG(0);
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_phash()) {
      phash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_txs_hash()) {
      txs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LedgerHeaderLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LedgerHeaderLite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // required bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phash;
        break;
      }

      // required bytes phash = 3;
      case 3: {
        if (tag == 26) {
         parse_phash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_txs_hash;
        break;
      }

      // required bytes txs_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_txs_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txs_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_apply_time;
        break;
      }

      // required int64 apply_time = 5;
      case 5: {
        if (tag == 40) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tx_count;
        break;
      }

      // required int64 tx_count = 6;
      case 6: {
        if (tag == 48) {
         parse_tx_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_count_)));
          set_has_tx_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LedgerHeaderLite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LedgerHeaderLite)
  return false;
#undef DO_
}

void LedgerHeaderLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LedgerHeaderLite)
  // required int64 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence(), output);
  }

  // required bytes hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // required bytes phash = 3;
  if (has_phash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->phash(), output);
  }

  // required bytes txs_hash = 4;
  if (has_txs_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->txs_hash(), output);
  }

  // required int64 apply_time = 5;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->apply_time(), output);
  }

  // required int64 tx_count = 6;
  if (has_tx_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tx_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.LedgerHeaderLite)
}

::google::protobuf::uint8* LedgerHeaderLite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LedgerHeaderLite)
  // required int64 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence(), target);
  }

  // required bytes hash = 2;
  if (has_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // required bytes phash = 3;
  if (has_phash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->phash(), target);
  }

  // required bytes txs_hash = 4;
  if (has_txs_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->txs_hash(), target);
  }

  // required int64 apply_time = 5;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->apply_time(), target);
  }

  // required int64 tx_count = 6;
  if (has_tx_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tx_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LedgerHeaderLite)
  return target;
}

int LedgerHeaderLite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.LedgerHeaderLite)
  int total_size = 0;

  if (has_sequence()) {
    // required int64 sequence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());
  }

  if (has_hash()) {
    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  if (has_phash()) {
    // required bytes phash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phash());
  }

  if (has_txs_hash()) {
    // required bytes txs_hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txs_hash());
  }

  if (has_apply_time()) {
    // required int64 apply_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->apply_time());
  }

  if (has_tx_count()) {
    // required int64 tx_count = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_count());
  }

  return total_size;
}
int LedgerHeaderLite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LedgerHeaderLite)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 sequence = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence());

    // required bytes hash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());

    // required bytes phash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phash());

    // required bytes txs_hash = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txs_hash());

    // required int64 apply_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->apply_time());

    // required int64 tx_count = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedgerHeaderLite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LedgerHeaderLite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LedgerHeaderLite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LedgerHeaderLite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LedgerHeaderLite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LedgerHeaderLite)
    MergeFrom(*source);
  }
}

void LedgerHeaderLite::MergeFrom(const LedgerHeaderLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LedgerHeaderLite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_phash()) {
      set_has_phash();
      phash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phash_);
    }
    if (from.has_txs_hash()) {
      set_has_txs_hash();
      txs_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txs_hash_);
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_tx_count()) {
      set_tx_count(from.tx_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LedgerHeaderLite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LedgerHeaderLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerHeaderLite::CopyFrom(const LedgerHeaderLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LedgerHeaderLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerHeaderLite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LedgerHeaderLite::Swap(LedgerHeaderLite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerHeaderLite::InternalSwap(LedgerHeaderLite* other) {
  std::swap(sequence_, other->sequence_);
  hash_.Swap(&other->hash_);
  phash_.Swap(&other->phash_);
  txs_hash_.Swap(&other->txs_hash_);
  std::swap(apply_time_, other->apply_time_);
  std::swap(tx_count_, other->tx_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LedgerHeaderLite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedgerHeaderLite_descriptor_;
  metadata.reflection = LedgerHeaderLite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LedgerHeaderLite

// required int64 sequence = 1;
bool LedgerHeaderLite::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LedgerHeaderLite::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
void LedgerHeaderLite::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
void LedgerHeaderLite::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
 ::google::protobuf::int64 LedgerHeaderLite::sequence() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.sequence)
  return sequence_;
}
 void LedgerHeaderLite::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.sequence)
}

// required bytes hash = 2;
bool LedgerHeaderLite::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LedgerHeaderLite::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void LedgerHeaderLite::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void LedgerHeaderLite::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& LedgerHeaderLite::hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.hash)
}
 void LedgerHeaderLite::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeaderLite.hash)
}
 void LedgerHeaderLite::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeaderLite.hash)
}
 ::std::string* LedgerHeaderLite::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeaderLite.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LedgerHeaderLite::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeaderLite.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeaderLite.hash)
}

// required bytes phash = 3;
bool LedgerHeaderLite::has_phash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LedgerHeaderLite::set_has_phash() {
  _has_bits_[0] |= 0x00000004u;
}
void LedgerHeaderLite::clear_has_phash() {
  _has_bits_[0] &= ~0x00000004u;
}
void LedgerHeaderLite::clear_phash() {
  phash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phash();
}
 const ::std::string& LedgerHeaderLite::phash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.phash)
  return phash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_phash(const ::std::string& value) {
  set_has_phash();
  phash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.phash)
}
 void LedgerHeaderLite::set_phash(const char* value) {
  set_has_phash();
  phash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeaderLite.phash)
}
 void LedgerHeaderLite::set_phash(const void* value, size_t size) {
  set_has_phash();
  phash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeaderLite.phash)
}
 ::std::string* LedgerHeaderLite::mutable_phash() {
  set_has_phash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeaderLite.phash)
  return phash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LedgerHeaderLite::release_phash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeaderLite.phash)
  clear_has_phash();
  return phash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_allocated_phash(::std::string* phash) {
  if (phash != NULL) {
    set_has_phash();
  } else {
    clear_has_phash();
  }
  phash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeaderLite.phash)
}

// required bytes txs_hash = 4;
bool LedgerHeaderLite::has_txs_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LedgerHeaderLite::set_has_txs_hash() {
  _has_bits_[0] |= 0x00000008u;
}
void LedgerHeaderLite::clear_has_txs_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
void LedgerHeaderLite::clear_txs_hash() {
  txs_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txs_hash();
}
 const ::std::string& LedgerHeaderLite::txs_hash() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.txs_hash)
  return txs_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_txs_hash(const ::std::string& value) {
  set_has_txs_hash();
  txs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.txs_hash)
}
 void LedgerHeaderLite::set_txs_hash(const char* value) {
  set_has_txs_hash();
  txs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.LedgerHeaderLite.txs_hash)
}
 void LedgerHeaderLite::set_txs_hash(const void* value, size_t size) {
  set_has_txs_hash();
  txs_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.LedgerHeaderLite.txs_hash)
}
 ::std::string* LedgerHeaderLite::mutable_txs_hash() {
  set_has_txs_hash();
  // @@protoc_insertion_point(field_mutable:protocol.LedgerHeaderLite.txs_hash)
  return txs_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LedgerHeaderLite::release_txs_hash() {
  // @@protoc_insertion_point(field_release:protocol.LedgerHeaderLite.txs_hash)
  clear_has_txs_hash();
  return txs_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LedgerHeaderLite::set_allocated_txs_hash(::std::string* txs_hash) {
  if (txs_hash != NULL) {
    set_has_txs_hash();
  } else {
    clear_has_txs_hash();
  }
  txs_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txs_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerHeaderLite.txs_hash)
}

// required int64 apply_time = 5;
bool LedgerHeaderLite::has_apply_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LedgerHeaderLite::set_has_apply_time() {
  _has_bits_[0] |= 0x00000010u;
}
void LedgerHeaderLite::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void LedgerHeaderLite::clear_apply_time() {
  apply_time_ = GOOGLE_LONGLONG(0);
  clear_has_apply_time();
}
 ::google::protobuf::int64 LedgerHeaderLite::apply_time() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.apply_time)
  return apply_time_;
}
 void LedgerHeaderLite::set_apply_time(::google::protobuf::int64 value) {
  set_has_apply_time();
  apply_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.apply_time)
}

// required int64 tx_count = 6;
bool LedgerHeaderLite::has_tx_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LedgerHeaderLite::set_has_tx_count() {
  _has_bits_[0] |= 0x00000020u;
}
void LedgerHeaderLite::clear_has_tx_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void LedgerHeaderLite::clear_tx_count() {
  tx_count_ = GOOGLE_LONGLONG(0);
  clear_has_tx_count();
}
 ::google::protobuf::int64 LedgerHeaderLite::tx_count() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerHeaderLite.tx_count)
  return tx_count_;
}
 void LedgerHeaderLite::set_tx_count(::google::protobuf::int64 value) {
  set_has_tx_count();
  tx_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerHeaderLite.tx_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
